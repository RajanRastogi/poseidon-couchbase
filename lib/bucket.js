// Generated by CoffeeScript 1.6.3
(function() {
  var Bucket, Connection,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Connection = require('./connection');

  Bucket = (function(_super) {
    __extends(Bucket, _super);

    function Bucket(connectionName) {
      Bucket.__super__.constructor.apply(this, arguments);
      return;
    }

    Bucket.prototype.safeRemove = function(key, deferred) {
      var _result,
        _this = this;
      _result = deferred != null ? deferred : Promise.pending();
      this._bucket.then(function(bucket) {
        return bucket.remove(key, function(err, data) {
          if (err != null) {
            err.key = key;
            if (err.code === 11) {
              console.log("Remove failed, retrying " + key);
              console.log(_result.promise.isFulfilled());
              return setTimeout(function() {
                return _this.safeRemove(key, _result);
              }, 1000);
            } else {
              return _result.reject(err);
            }
          } else {
            return _result.resolve(data);
          }
        });
      });
      return _result.promise;
    };

    Bucket.prototype.getAndLock = function(key, locktime, retries) {
      var _result,
        _this = this;
      if (retries == null) {
        retries = 10;
      }
      _result = Promise.pending();
      this._bucket.then(function(bucket) {
        return bucket.lock(key, {
          locktime: locktime
        }, function(err, data) {
          if (err != null) {
            if (err.code === 11 && retries > 0) {
              return setTimeout(function() {
                return _result.resolve(_this.getAndLock(key, locktime, retries - 1));
              }, Math.random() * 30);
            } else {
              return _result.reject(err);
            }
          } else {
            return _result.resolve([data.value, data]);
          }
        });
      });
      return _result.promise;
    };

    return Bucket;

  })(Connection);

  module.exports = Bucket;

}).call(this);
