// Generated by CoffeeScript 1.6.3
(function() {
  var Couchbase, Driver, Promise;

  Couchbase = require('couchbase');

  Promise = require('poseidon').Promise;

  Driver = (function() {
    function Driver() {}

    Driver._configuration = {};

    Driver._connections = {};

    Driver.configure = function(connName, connConfig) {
      if (connConfig == null) {
        throw new Error('Configuration object required');
      }
      this._configuration[connName] = connConfig;
    };

    Driver.openConnection = function(connName, options) {
      var connection,
        _this = this;
      if (options == null) {
        options = {};
      }
      if (this._configuration[connName] == null) {
        throw Error('Connection '+ connName +' not configured');
      }
      if (this._connections[connName] != null) {
        return this._connections[connName];
      }
      connection = (function() {
        var client, _connection;
        _connection = Promise.pending();
        client = new Couchbase.Connection(_this._configuration[connName], function(err) {
          var _ref;
          if (err != null) {
            return _connection.reject(err);
          } else {
            client.operationTimeout = (_ref = options.operationTimeout) != null ? _ref : 10000;
            return _connection.resolve(client);
          }
        });
        return _connection.promise;
      })();
      return connection.then(function(client) {
        return _this._connections[connName] = connection;
      })["catch"](function(err) {
        return _this.openConnection(connName);
      });
    };

    Driver.closeConnection = function(connName) {
      var _this = this;
      if (this._connections[connName] == null) {
        throw Error('Connection does not exist');
      }
      this._connections[connName].then(function(client) {
        client.shutdown();
        return delete _this._connections[connName];
      }).done();
    };

    Driver.reset = function() {
      var connConfig, connName, _ref;
      _ref = this._configuration;
      for (connName in _ref) {
        connConfig = _ref[connName];
        if (this._connections[connName] != null) {
          this.closeConnection(connName);
        }
        delete this._configuration[connName];
      }
    };

    Driver.shutdown = function() {
      var connConfig, connName, _ref;
      _ref = this._configuration;
      for (connName in _ref) {
        connConfig = _ref[connName];
        if (this._connections[connName] != null) {
          this.closeConnection(connName);
        }
      }
    };

    return Driver;

  })();

  module.exports = Driver;

}).call(this);
